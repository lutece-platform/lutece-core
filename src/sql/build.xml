<project name="Lutece - Database Initialisation" default="specific" basedir=".">
    
    <macrodef name="runsql">
        <attribute name="sql.driver" />
        <attribute name="sql.url" />
        <attribute name="sql.userid" />
        <attribute name="sql.password" />
        <attribute name="sql.connector.path" />
        <attribute name="sql.fileset.refid"/>
        <sequential>
            <!--echo message="sql.driver : @{sql.driver}" />
            <echo message="sql.url : @{sql.url}" />
            <echo message="sql.userid : @{sql.userid}" />
            <echo message="sql.password : @{sql.password}" />
            <echo message="sql.connector.path : @{sql.connector.path}" /-->
            <!-- Concatenate all sql files into one -->
            <var name="log_pathconvert" value="" unset="true"/>
            <pathconvert property="log_pathconvert" pathsep="${line.separator}" refid="@{sql.fileset.refid}">
                <map from="${basedir}/" to="    "></map>
            </pathconvert>
            <echo message="Creating sql resource from the following files:${line.separator}${log_pathconvert}"/>
            <tempfile property="temp.sql" prefix="tmp_" />
            <concat destfile="${temp.sql}" fixlastline="true">
            	<fileset file="init_db/init_session_${dbms}.sql" />
                <fileset refid="@{sql.fileset.refid}"/>
            </concat>
            <echo message="Translating SQL files to fit ${dbms} requirements"/>
            <propertycopy name="regexp.list" from="regexp.${dbms}.list" override="true"/>
            <for list="${regexp.list}" delimiter="," param="index">
                <sequential>
                    <propertycopy name="regexp.index" from="regexp.${dbms}.@{index}" override="true"/>
                    <propertycopy name="replace.index" from="replace.${dbms}.@{index}" override="true"/>
                    <echo message=" ====== Applying rule @{index} ${regexp.index} => ${replace.index}" />
                    <replaceregexp file="${temp.sql}" match="${regexp.index}"
                                   replace="${replace.index}" byline="true" flags="gi" />
                </sequential>
            </for>
        	
            <sql driver="@{sql.driver}"
                 url="@{sql.url}"
                 userid="@{sql.userid}" 
                 password="@{sql.password}"
                 autocommit="true"
                 classpath="@{sql.connector.path}"
                 onerror="${on_sql_error}"
                 encoding="${db.encoding}"
            >
                <fileset file="${temp.sql}"/>
            </sql>
            <delete file="${temp.sql}" verbose="true" />
        </sequential>
    </macrodef>
    
    <macrodef name="getdbms">
        <attribute name="dbms.url"/>
        <attribute name="property"/>
        <sequential>
        <propertyregex property="@{property}"
                       input="@{dbms.url}"
                       regexp="jdbc:(.*?):.*"
                       select="\1"
                       casesensitive="false" />
        </sequential>
    </macrodef>
    <regexp id="regexp.oracle.url" pattern="(jdbc:oracle:thin:.*)/([^?]*)\??" />

    <regexp id="regexp.mysql.url" pattern="(.*)/([^?]*)\??" />

	<regexp id="regexp.hsqldb.url" pattern=".*[:|/]([^;]*);?" />

    <regexp id="regexp.postgresql.url" pattern="(.*)/([^?]*)\??" />
    
    <target name="init" description="Prepare the database by creating it and inserting data" extensionOf="init_ep">
        <echo message="Preparing the database(s) by creating it and inserting data" />
        
        <!-- Property file -->
        <property file="build.properties" />
        <property name="db.properties.path" value="../conf/db.properties"/>
        
        <!-- Webapp database pool configuration file -->
        <property file="${db.properties.path}" />
        <getdbms dbms.url="${portal.url}" property="dbms" />
        <!--propertyregex property="dbms"
                       input="${portal.url}"
                       regexp="jdbc:(.*?):.*"
                       select="\1"
                       casesensitive="false" /-->
        <switch value="${dbms}">
            <case value="hsqldb">
                <property name="hsqldb" value="hsqldb" />
            </case>
			<case value="oracle">
				<property name="oracle" value="oracle" />
			</case>
            <default>
                <property name="mysql" value="mysql" />
            </default>
			<case value="postgresql">
				<property name="postgresql" value="postgresql" />
			</case>
        </switch>
        
    </target>
    
    <target name="init_mysql" if="mysql">
        <echo message="=> MySQL" />
        
        <!-- Path to the jar that contain database connector driver -->
        <property name="db.connector.path" value="${mysql.connector.jar.path}" />
        
        <!-- Define the baseUrl and baseName (drop and create DB) -->
        <property file="${db.properties.path}" />
        <propertyregex property="baseUrl"
                       input="${portal.url}"
                       select="\1"
                       casesensitive="false">
            <regexp refid="regexp.mysql.url"/>
        </propertyregex>
        
        <propertyregex property="baseName"
                       input="${portal.url}"
                       select="\2"
                       casesensitive="false">
            <regexp refid="regexp.mysql.url"/>
        </propertyregex>
    </target>

    <target name="init_oracle" if="oracle">
        <echo message="=> Oracle" />
        
        <!-- Path to the jar that contain database connector driver -->
        <property name="db.connector.path" value="${oracle.connector.jar.path}" />
        
        <!-- Define the baseUrl and baseName (drop and create DB) -->
        <property file="${db.properties.path}" />
        <propertyregex property="baseUrl"
                       input="${portal.url}"
                       select="\1/\2"
                       casesensitive="false">
            <regexp refid="regexp.oracle.url"/>
        </propertyregex>
        
        <propertyregex property="baseName"
                       input="${portal.url}"
                       select="\2"
                       casesensitive="false">
            <regexp refid="regexp.oracle.url"/>
        </propertyregex>
    </target>    

    <target name="init_hsqldb" if="hsqldb">
        <echo message="=> HSQLDB" />
        
        <!-- Path to the jar that contain database connector driver -->
        <property name="db.connector.path" value="${hsqldb.connector.jar.path}" />
        
        <!-- Define the baseUrl and baseName (drop and create DB) -->
        <property file="${db.properties.path}" />
        <property name="baseUrl" value="${portal.url}" />
        <propertyregex property="baseName"
                       input="${portal.url}"
                       select="\1"
                       casesensitive="false">
            <regexp refid="regexp.hsqldb.url"/>
        </propertyregex>
    </target>

    <target name="init_postgresql" if="postgresql">
        <echo message="=> POSTGRESQL" />
        
        <!-- Path to the jar that contain database connector driver -->
        <property name="db.connector.path" value="${postgresql.connector.jar.path}" />
        
        <!-- Define the baseUrl and baseName (drop and create DB) -->
        <property file="${db.properties.path}" />
        <propertyregex property="baseUrl"
                       input="${portal.url}"
                       select="\1/postgres"
                       casesensitive="false">
            <regexp refid="regexp.postgresql.url"/>
        </propertyregex>
        <propertyregex property="baseName"
                       input="${portal.url}"
                       select="\2"
                       casesensitive="false">
            <regexp refid="regexp.postgresql.url"/>
        </propertyregex>
        <property name="baseOwner" value="${portal.user}" />
    </target>
    
    <!-- For import lib ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="ant-contrib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    
    <target name="check_contrib_present">
        <available property="contrib.jar.present" resource="net/sf/antcontrib/antlib.xml">
            <classpath >
                <pathelement location="ant-contrib/ant-contrib-1.0b3.jar" />
            </classpath>
        </available>
    </target>
    
    <target name="contrib_not_found" unless="contrib.jar.present" depends="check_contrib_present">
        <echo level="warning">
            ATTENTION : package "ant-contrib.jar" is not found in your classpath ANT_HOME/lib.
            You can dowload this on URL "http://sourceforge.net/project/showfiles.php?group_id=36177".
            Version of ant-contrib require is 1.0b3 to work properly.
            
            All tables will be create in core pool portal.
        </echo>
    </target>
    
    <!-- target create specific database on pool define in db.properties-->
    <target name="specific" if="contrib.jar.present" depends="contrib_not_found,db_core_init,db_plugins_specific_database_init,db_init_old_structure"/>
    
    <!-- Default target to be used with sql/plugins/<plugin name>/core and sql/plugins/<plugin name>/plugin structure -->
    <target name="all" if="contrib.jar.present" depends="contrib_not_found,db_core_init,db_plugin_init,db_init_old_structure"/>
    
    <!-- target for update script -->
    <target name="update" if="contrib.jar.present" depends="contrib_not_found,db_plugins_specific_database_update"/>
    
    <!-- Target that create db -->	
    <target name="drop_and_create_db" depends="init, init_mysql, init_hsqldb, init_oracle, init_postgresql">
        <echo message="Create the core database ${baseName} on host ${baseUrl}" />	
        <property file="${db.properties.path}" />
        
        <!-- Copy the drop & create SQL script and replace the baseName -->
        <copy file="init_db/${dbms}.sql" tofile="${dbms}.sql" overwrite="true" />
        <replaceregexp file="${dbms}.sql" match="baseName" replace="${baseName}" byline="true" />		
        
        <fileset file="${dbms}.sql" id="sql.db.create" />
        <runsql sql.driver="${portal.driver}"
                sql.url="${baseUrl}"
                sql.userid="${portal.user}" 
                sql.password="${portal.password}"
                sql.connector.path="${db.connector.path}"
                sql.fileset.refid="sql.db.create" />
        
        <delete file="${dbms}.sql" verbose="true" />
    </target>
    
    <!-- Target that initialize core db -->	
    <target name="core_files" depends="drop_and_create_db">	
        <fileset id="sql.core.files" dir="${basedir}">
            <include name="*.sql" />
            <include name="plugins/**/core/*.sql" />
        </fileset>	
        <pathconvert refid="sql.core.files" setonempty="false" property="exists.sql.core.files"/>
    </target>
    <target name="db_core_init" if="exists.sql.core.files" depends="core_files" extensionOf="db_core_init_ep">
        <echo message="Preparing the core database" />
        <runsql sql.driver="${portal.driver}"
                sql.url="${portal.url}"
                sql.userid="${portal.user}" 
                sql.password="${portal.password}"
                sql.connector.path="${db.connector.path}"
                sql.fileset.refid="sql.core.files"/>
    </target>
    
    <!-- ALL command line -->
    <import file="includes/build-all.xml" />
    
    <!-- UPDATE command line -->
    <import file="includes/build-update.xml" /> 
    
    <!-- SPECIFICS command line (by default) -->
    <import file="includes/build-specific.xml" /> 
    
    <!-- DB_INIT_OLD_STRUCTURE command line -->
    <import file="includes/build-oldstructure.xml" /> 
    
</project>
